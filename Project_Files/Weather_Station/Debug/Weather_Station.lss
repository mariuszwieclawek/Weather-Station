
Weather_Station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001dc  00800100  00000b6c  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008002dc  008002dc  00000ddc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000242a  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f70  00000000  00000000  000033be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db6  00000000  00000000  0000432e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  000050e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b5  00000000  00000000  00005358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d9  00000000  00000000  00005b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000064e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  68:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  6c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  70:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  74:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  7c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  80:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  84:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  88:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  8c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  90:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  94:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  98:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  9c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  a0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  a4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  a8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  ac:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  b0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

000000b4 <U_ATTR_OFF>:
  b4:	1b 5b 6d 00                                         .[m.

000000b8 <UCUR_SHOW>:
  b8:	1b 5b 3f 32 35 68 00                                .[?25h.

000000bf <UCUR_HIDE>:
  bf:	1b 5b 3f 32 35 6c 00                                .[?25l.

000000c6 <UHOME>:
  c6:	1b 5b 3b 48 00                                      .[;H.

000000cb <UCLS>:
  cb:	1b 5b 32 4a 00                                      .[2J.

000000d0 <__ctors_end>:
  d0:	11 24       	eor	r1, r1
  d2:	1f be       	out	0x3f, r1	; 63
  d4:	cf ef       	ldi	r28, 0xFF	; 255
  d6:	d8 e0       	ldi	r29, 0x08	; 8
  d8:	de bf       	out	0x3e, r29	; 62
  da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
  dc:	12 e0       	ldi	r17, 0x02	; 2
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	ec e6       	ldi	r30, 0x6C	; 108
  e4:	fb e0       	ldi	r31, 0x0B	; 11
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
  e8:	05 90       	lpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	ac 3d       	cpi	r26, 0xDC	; 220
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	ac ed       	ldi	r26, 0xDC	; 220
  f6:	b2 e0       	ldi	r27, 0x02	; 2
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	ab 3e       	cpi	r26, 0xEB	; 235
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	0e 94 cb 01 	call	0x396	; 0x396 <main>
 106:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <_exit>

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <ADC_INIT_AVCC>:



void ADC_INIT_AVCC(void)
{
	ADCSRA |= (1<<ADEN); //ADEN: ADC Enable (uruchomienie przetwornika)
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 83       	st	Z, r24

	//ADPS2:0: ustawienie preskalera, preskaler= 128 // czestotliwosc pomiarow 125kHz czyli zawiera sie w przedziale podanym w datasheecie
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
 118:	80 81       	ld	r24, Z
 11a:	87 60       	ori	r24, 0x07	; 7
 11c:	80 83       	st	Z, r24

	//Napiecie odiesienia AVCC = 5V
	ADMUX  |=  (1<<REFS0);
 11e:	ec e7       	ldi	r30, 0x7C	; 124
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 64       	ori	r24, 0x40	; 64
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <ADC_MEASURE>:
}

uint16_t ADC_MEASURE(uint8_t channel)
{
	ADMUX = (ADMUX & 0xF8) | channel;		//wybor kanalu
 12a:	ec e7       	ldi	r30, 0x7C	; 124
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	90 81       	ld	r25, Z
 130:	98 7f       	andi	r25, 0xF8	; 248
 132:	89 2b       	or	r24, r25
 134:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);	//start pojedynczej konwersji
 136:	ea e7       	ldi	r30, 0x7A	; 122
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); //czeka na zakoñczenie konwersji
 140:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 144:	86 fd       	sbrc	r24, 6
 146:	fc cf       	rjmp	.-8      	; 0x140 <ADC_MEASURE+0x16>
	return ADC;
 148:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 14c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 150:	08 95       	ret

00000152 <DHT_Request>:

#define DHT11_PIN PORTD6		// Na tym porcie czujnik DHT11

void DHT_Request()				/* Microcontroller send start pulse/request */
{
	DDRD |= (1<<DHT11_PIN);
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	80 64       	ori	r24, 0x40	; 64
 156:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<DHT11_PIN);	/* set to low pin */
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	8f 7b       	andi	r24, 0xBF	; 191
 15c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	89 ef       	ldi	r24, 0xF9	; 249
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <DHT_Request+0x12>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <DHT_Request+0x1c>
 16e:	00 00       	nop
	_delay_ms(20);			/* wait for 20ms */
	PORTD |= (1<<DHT11_PIN);	/* set to high pin */
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	80 64       	ori	r24, 0x40	; 64
 174:	8b b9       	out	0x0b, r24	; 11
 176:	08 95       	ret

00000178 <DHT_Response>:
}

void DHT_Response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT11_PIN);
 178:	8a b1       	in	r24, 0x0a	; 10
 17a:	8f 7b       	andi	r24, 0xBF	; 191
 17c:	8a b9       	out	0x0a, r24	; 10
	while(PIND & (1<<DHT11_PIN));
 17e:	4e 99       	sbic	0x09, 6	; 9
 180:	fe cf       	rjmp	.-4      	; 0x17e <DHT_Response+0x6>
	while((PIND & (1<<DHT11_PIN))==0);
 182:	4e 9b       	sbis	0x09, 6	; 9
 184:	fe cf       	rjmp	.-4      	; 0x182 <DHT_Response+0xa>
	while(PIND & (1<<DHT11_PIN));
 186:	4e 99       	sbic	0x09, 6	; 9
 188:	fe cf       	rjmp	.-4      	; 0x186 <DHT_Response+0xe>
}
 18a:	08 95       	ret

0000018c <DHT_Receive_data>:


uint8_t DHT_Receive_data()			/* receive data, returns 8 bits */ 
{
	uint8_t c = 0;
	for (int q=0; q<8; q++)
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
}


uint8_t DHT_Receive_data()			/* receive data, returns 8 bits */ 
{
	uint8_t c = 0;
 190:	80 e0       	ldi	r24, 0x00	; 0
	for (int q=0; q<8; q++)
 192:	11 c0       	rjmp	.+34     	; 0x1b6 <DHT_Receive_data+0x2a>
	{
		while((PIND & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
 194:	4e 9b       	sbis	0x09, 6	; 9
 196:	fe cf       	rjmp	.-4      	; 0x194 <DHT_Receive_data+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	90 ea       	ldi	r25, 0xA0	; 160
 19a:	9a 95       	dec	r25
 19c:	f1 f7       	brne	.-4      	; 0x19a <DHT_Receive_data+0xe>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))/* if high pulse is greater than 30ms */
 19e:	4e 9b       	sbis	0x09, 6	; 9
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <DHT_Receive_data+0x20>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <DHT_Receive_data+0x22>
		else			/* otherwise its logic LOW */
		c = (c<<1);
 1ac:	88 0f       	add	r24, r24
		while(PIND & (1<<DHT11_PIN));
 1ae:	4e 99       	sbic	0x09, 6	; 9
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <DHT_Receive_data+0x22>


uint8_t DHT_Receive_data()			/* receive data, returns 8 bits */ 
{
	uint8_t c = 0;
	for (int q=0; q<8; q++)
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	28 30       	cpi	r18, 0x08	; 8
 1b8:	31 05       	cpc	r19, r1
 1ba:	64 f3       	brlt	.-40     	; 0x194 <DHT_Receive_data+0x8>
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
 1bc:	08 95       	ret

000001be <EEPROM_read>:
	EEPROM_write(uiAddress*8+3,pomiary->D_Temperature);
	EEPROM_write(uiAddress*8+4,pomiary->I_sensor1);
	EEPROM_write(uiAddress*8+5,pomiary->D_sensor1);
	EEPROM_write(uiAddress*8+6,pomiary->I_sensor2);
	EEPROM_write(uiAddress*8+7,pomiary->D_sensor2);
}
 1be:	f8 94       	cli
 1c0:	f9 99       	sbic	0x1f, 1	; 31
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <EEPROM_read+0x2>
 1c4:	92 bd       	out	0x22, r25	; 34
 1c6:	81 bd       	out	0x21, r24	; 33
 1c8:	8f b3       	in	r24, 0x1f	; 31
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	8f bb       	out	0x1f, r24	; 31
 1ce:	80 b5       	in	r24, 0x20	; 32
 1d0:	08 95       	ret

000001d2 <read_all_from_EEPROM>:

void read_all_from_EEPROM( unsigned int uiAddress )
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
	static char n = 1;
	tr_locate(9,1);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	89 e0       	ldi	r24, 0x09	; 9
 1dc:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
	tr_attr(1,WHITE,BLACK);
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	67 e0       	ldi	r22, 0x07	; 7
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <tr_attr>
	USART_PutS("==============================READ FROM EEPROM==============================\n");
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
	tr_locate(10,1);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	8a e0       	ldi	r24, 0x0A	; 10
 1f6:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
	USART_PutS("	                 Measurements every 10 minutes!");
 1fa:	8f e4       	ldi	r24, 0x4F	; 79
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
	tr_locate(11,1);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	8b e0       	ldi	r24, 0x0B	; 11
 206:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
	USART_PutS("============================================================================\n");
 20a:	80 e8       	ldi	r24, 0x80	; 128
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
	tr_locate(12,1);
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	8c e0       	ldi	r24, 0x0C	; 12
 216:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
	USART_PutS("n");
 21a:	8e ec       	ldi	r24, 0xCE	; 206
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
	tr_locate(12+n,1);
 222:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	84 5f       	subi	r24, 0xF4	; 244
 22a:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
	USART_PutInt(n,10);
 22e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 232:	6a e0       	ldi	r22, 0x0A	; 10
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
	tr_locate(12,5);
 23a:	65 e0       	ldi	r22, 0x05	; 5
 23c:	8c e0       	ldi	r24, 0x0C	; 12
 23e:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
	tr_attr(1,BLUE,BLACK);
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	64 e0       	ldi	r22, 0x04	; 4
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 73 03 	call	0x6e6	; 0x6e6 <tr_attr>
	USART_PutS("Humidity [%]");
 24c:	80 ed       	ldi	r24, 0xD0	; 208
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
	tr_locate(12+n,5);
 254:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 258:	65 e0       	ldi	r22, 0x05	; 5
 25a:	84 5f       	subi	r24, 0xF4	; 244
 25c:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
	USART_PutInt(EEPROM_read(uiAddress*8),10);
 260:	cc 0f       	add	r28, r28
 262:	dd 1f       	adc	r29, r29
 264:	cc 0f       	add	r28, r28
 266:	dd 1f       	adc	r29, r29
 268:	cc 0f       	add	r28, r28
 26a:	dd 1f       	adc	r29, r29
 26c:	ce 01       	movw	r24, r28
 26e:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_read>
 272:	6a e0       	ldi	r22, 0x0A	; 10
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
	USART_PutC('.');
 27a:	8e e2       	ldi	r24, 0x2E	; 46
 27c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
	USART_PutInt(EEPROM_read(uiAddress*8+1),10);
 280:	ce 01       	movw	r24, r28
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_read>
 288:	6a e0       	ldi	r22, 0x0A	; 10
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
	tr_locate(12,20);
 290:	64 e1       	ldi	r22, 0x14	; 20
 292:	8c e0       	ldi	r24, 0x0C	; 12
 294:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
	tr_attr(1,RED,BLACK);
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <tr_attr>
	USART_PutS("Temperature [°]");
 2a2:	8d ed       	ldi	r24, 0xDD	; 221
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
	tr_locate(12+n,20);
 2aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ae:	64 e1       	ldi	r22, 0x14	; 20
 2b0:	84 5f       	subi	r24, 0xF4	; 244
 2b2:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
	USART_PutInt(EEPROM_read(uiAddress*8+2),10);
 2b6:	ce 01       	movw	r24, r28
 2b8:	02 96       	adiw	r24, 0x02	; 2
 2ba:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_read>
 2be:	6a e0       	ldi	r22, 0x0A	; 10
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
	USART_PutC('.');
 2c6:	8e e2       	ldi	r24, 0x2E	; 46
 2c8:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
	USART_PutInt(EEPROM_read(uiAddress*8+3),10);
 2cc:	ce 01       	movw	r24, r28
 2ce:	03 96       	adiw	r24, 0x03	; 3
 2d0:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_read>
 2d4:	6a e0       	ldi	r22, 0x0A	; 10
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
	tr_locate(12,40);
 2dc:	68 e2       	ldi	r22, 0x28	; 40
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
	tr_attr(1,MAGENTA,BLACK);
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	65 e0       	ldi	r22, 0x05	; 5
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 73 03 	call	0x6e6	; 0x6e6 <tr_attr>
	USART_PutS("RAIN_VOLTAGE [V]");
 2ee:	8d ee       	ldi	r24, 0xED	; 237
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
	tr_locate(12+n,40);
 2f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2fa:	68 e2       	ldi	r22, 0x28	; 40
 2fc:	84 5f       	subi	r24, 0xF4	; 244
 2fe:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
	USART_PutInt(EEPROM_read(uiAddress*8+4),10);
 302:	ce 01       	movw	r24, r28
 304:	04 96       	adiw	r24, 0x04	; 4
 306:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_read>
 30a:	6a e0       	ldi	r22, 0x0A	; 10
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
	USART_PutS(".");
 312:	8e ef       	ldi	r24, 0xFE	; 254
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
	USART_PutInt(EEPROM_read(uiAddress*8+5),10);
 31a:	ce 01       	movw	r24, r28
 31c:	05 96       	adiw	r24, 0x05	; 5
 31e:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_read>
 322:	6a e0       	ldi	r22, 0x0A	; 10
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
	tr_locate(12,60);
 32a:	6c e3       	ldi	r22, 0x3C	; 60
 32c:	8c e0       	ldi	r24, 0x0C	; 12
 32e:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
	tr_attr(1,GREEN,BLACK);
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 73 03 	call	0x6e6	; 0x6e6 <tr_attr>
	USART_PutS("LIGHT_VOLTAGE [V]");
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	92 e0       	ldi	r25, 0x02	; 2
 340:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
	tr_locate(12+n,60);
 344:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 348:	6c e3       	ldi	r22, 0x3C	; 60
 34a:	84 5f       	subi	r24, 0xF4	; 244
 34c:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
	USART_PutInt(EEPROM_read(uiAddress*8+6),10);
 350:	ce 01       	movw	r24, r28
 352:	06 96       	adiw	r24, 0x06	; 6
 354:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_read>
 358:	6a e0       	ldi	r22, 0x0A	; 10
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
	USART_PutS(".");
 360:	8e ef       	ldi	r24, 0xFE	; 254
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
	USART_PutInt(EEPROM_read(uiAddress*8+7),10);
 368:	ce 01       	movw	r24, r28
 36a:	07 96       	adiw	r24, 0x07	; 7
 36c:	0e 94 df 00 	call	0x1be	; 0x1be <EEPROM_read>
 370:	6a e0       	ldi	r22, 0x0A	; 10
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
	
	n++;
 378:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 37c:	8f 5f       	subi	r24, 0xFF	; 255
 37e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if(n == 10)
 382:	8a 30       	cpi	r24, 0x0A	; 10
 384:	29 f4       	brne	.+10     	; 0x390 <read_all_from_EEPROM+0x1be>
	{
		n = 1;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		tr_cls(1);
 38c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <tr_cls>
	}
	
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <main>:
unsigned int EEPROM_ADDRESS = 0x0000;		//tutaj okreslamy miejsce w pamieci w ktorym chcemy zapisac dane i pozniej je odczytac


int main(void)
{
	USART_Init(MYUBRR);		//inicjalizacja uart
 396:	87 e6       	ldi	r24, 0x67	; 103
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 cf 03 	call	0x79e	; 0x79e <USART_Init>
	ADC_INIT_AVCC();		//inicjalizacja przetwornika ADC
 39e:	0e 94 87 00 	call	0x10e	; 0x10e <ADC_INIT_AVCC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a2:	2f ef       	ldi	r18, 0xFF	; 255
 3a4:	83 ed       	ldi	r24, 0xD3	; 211
 3a6:	90 e3       	ldi	r25, 0x30	; 48
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	80 40       	sbci	r24, 0x00	; 0
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <main+0x12>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x1c>
 3b2:	00 00       	nop

	_delay_ms(1000); //stabilizacja zasilania
	
	
	/* Wyswietlenie wiadomosci startowej */
	tr_cls(0);
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <tr_cls>
	USART_PutS("Pomiar wilgotnosci, temperatury oraz natezenia swiatla: ");
 3ba:	82 e1       	ldi	r24, 0x12	; 18
 3bc:	92 e0       	ldi	r25, 0x02	; 2
 3be:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	87 ea       	ldi	r24, 0xA7	; 167
 3c6:	91 e6       	ldi	r25, 0x61	; 97
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x32>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x3c>
 3d2:	00 00       	nop
	_delay_ms(2000);
	tr_cls(1);
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <tr_cls>
	
	DDRC &=	~(1<<ADCIN);            //Ustawienie PORTC2 jako wejscie (przetwornik ADC)
 3da:	87 b1       	in	r24, 0x07	; 7
 3dc:	8b 7f       	andi	r24, 0xFB	; 251
 3de:	87 b9       	out	0x07, r24	; 7
 3e0:	2f ef       	ldi	r18, 0xFF	; 255
 3e2:	83 ed       	ldi	r24, 0xD3	; 211
 3e4:	90 e3       	ldi	r25, 0x30	; 48
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0x50>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x5a>
 3f0:	00 00       	nop
		//tr_attr(1,RED,BLACK);
		
		/************************************************			ADC				*************************************************************/
		
		/********************* ADC1 RAINDROPS MEASUREMENT************************/ 
		meas1 = ADC_MEASURE(PORTC1);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 95 00 	call	0x12a	; 0x12a <ADC_MEASURE>
 3f8:	bc 01       	movw	r22, r24
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__floatunsisf>
		
		// ADC1 RAINDROPS AS A VOLTAGE
		meas1 = (5 * meas1) / 1024;			// skalujemy jako napiecie, 1024 bo ADC 10bitowy
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	40 ea       	ldi	r20, 0xA0	; 160
 408:	50 e4       	ldi	r21, 0x40	; 64
 40a:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	40 e8       	ldi	r20, 0x80	; 128
 414:	5a e3       	ldi	r21, 0x3A	; 58
 416:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
		meas1 *= 100;							// przesuwamy o dwa miejsca tak zeby zmienic format z x,xx na xxx
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	48 ec       	ldi	r20, 0xC8	; 200
 420:	52 e4       	ldi	r21, 0x42	; 66
 422:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 426:	6b 01       	movw	r12, r22
 428:	7c 01       	movw	r14, r24
		div_t divmod1 = div(meas1,100);		// tworzymy strukture w ktorej zapisujemy wynik i reszte z dzielenia przez 100 divmod.quot-wynik, divmod.rem-reszta
 42a:	0e 94 1b 04 	call	0x836	; 0x836 <__fixsfsi>
 42e:	dc 01       	movw	r26, r24
 430:	cb 01       	movw	r24, r22
 432:	64 e6       	ldi	r22, 0x64	; 100
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	0e 94 4c 05 	call	0xa98	; 0xa98 <__divmodhi4>
 43a:	06 2f       	mov	r16, r22
 43c:	a7 2e       	mov	r10, r23
 43e:	18 2f       	mov	r17, r24
 440:	b9 2e       	mov	r11, r25
		
		//WRITE MEASUREMENTS TO STRUCTURE		//DATA STRUCTURE DEFINE IN EEPROM.h
		Data_Measurements.I_sensor1 = divmod1.quot;			// zapisujemy w strukturze czesci calkowite
 442:	ce ed       	ldi	r28, 0xDE	; 222
 444:	d2 e0       	ldi	r29, 0x02	; 2
 446:	6c 83       	std	Y+4, r22	; 0x04
		Data_Measurements.D_sensor1 = divmod1.rem;			// zapisujemy w strukturze czesci ulamkowe
 448:	8d 83       	std	Y+5, r24	; 0x05
		
		/********************* ADC2 LIGHT INTENSITY MEASUREMENT************************/
		// ADC2 LIGHT INTENSITY MEASUREMENT
		meas2 = ADC_MEASURE(PORTC2);
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	0e 94 95 00 	call	0x12a	; 0x12a <ADC_MEASURE>
 450:	bc 01       	movw	r22, r24
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__floatunsisf>
		
		// ADC2 LIGHT INTENSITY AS A VOLTAGE
		meas2 = (5 * meas2) / 1024;			// skalujemy jako napiecie, 1024 bo ADC 10bitowy
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	40 ea       	ldi	r20, 0xA0	; 160
 460:	50 e4       	ldi	r21, 0x40	; 64
 462:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	40 e8       	ldi	r20, 0x80	; 128
 46c:	5a e3       	ldi	r21, 0x3A	; 58
 46e:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
		meas2 *= 100;							// przesuwamy o dwa miejsca tak zeby zmienic format z x,xx na xxx
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	48 ec       	ldi	r20, 0xC8	; 200
 478:	52 e4       	ldi	r21, 0x42	; 66
 47a:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3>
 47e:	2b 01       	movw	r4, r22
 480:	3c 01       	movw	r6, r24
		div_t divmod2 = div(meas2,100);		// tworzymy strukture w ktorej zapisujemy wynik i reszte z dzielenia przez 100 divmod.quot-wynik, divmod.rem-reszta
 482:	0e 94 1b 04 	call	0x836	; 0x836 <__fixsfsi>
 486:	dc 01       	movw	r26, r24
 488:	cb 01       	movw	r24, r22
 48a:	64 e6       	ldi	r22, 0x64	; 100
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	0e 94 4c 05 	call	0xa98	; 0xa98 <__divmodhi4>
 492:	86 2e       	mov	r8, r22
 494:	27 2e       	mov	r2, r23
 496:	98 2e       	mov	r9, r24
 498:	39 2e       	mov	r3, r25
		
		//WRITE MEASUREMENTS TO STRUCTURE		//DATA STRUCTURE DEFINE IN EEPROM.h
		Data_Measurements.I_sensor2 = divmod2.quot;			// zapisujemy w strukturze czesci calkowite
 49a:	6e 83       	std	Y+6, r22	; 0x06
		Data_Measurements.D_sensor2 = divmod2.rem;			// zapisujemy w strukturze czesci ulamkowe
 49c:	8f 83       	std	Y+7, r24	; 0x07
 49e:	2f ef       	ldi	r18, 0xFF	; 255
 4a0:	85 ea       	ldi	r24, 0xA5	; 165
 4a2:	9e e0       	ldi	r25, 0x0E	; 14
 4a4:	21 50       	subi	r18, 0x01	; 1
 4a6:	80 40       	sbci	r24, 0x00	; 0
 4a8:	90 40       	sbci	r25, 0x00	; 0
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4ae:	00 00       	nop
		
		
		/************************************************			DHT11				*************************************************************/
		_delay_ms(300);
		DHT_Request();		/* send start pulse */
 4b0:	0e 94 a9 00 	call	0x152	; 0x152 <DHT_Request>
		DHT_Response();		/* receive response */
 4b4:	0e 94 bc 00 	call	0x178	; 0x178 <DHT_Response>
		I_HUM=DHT_Receive_data();	/* store first eight bit in I_HUM */
 4b8:	0e 94 c6 00 	call	0x18c	; 0x18c <DHT_Receive_data>
 4bc:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <I_HUM>
		D_HUM=DHT_Receive_data();	/* store next eight bit in D_HUM */
 4c0:	0e 94 c6 00 	call	0x18c	; 0x18c <DHT_Receive_data>
 4c4:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <D_HUM>
		I_Temp=DHT_Receive_data();	/* store next eight bit in I_Temp */
 4c8:	0e 94 c6 00 	call	0x18c	; 0x18c <DHT_Receive_data>
 4cc:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <I_Temp>
		D_Temp=DHT_Receive_data();	/* store next eight bit in D_Temp */
 4d0:	0e 94 c6 00 	call	0x18c	; 0x18c <DHT_Receive_data>
 4d4:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <D_Temp>
		CheckSum=DHT_Receive_data();/* store next eight bit in CheckSum */
 4d8:	0e 94 c6 00 	call	0x18c	; 0x18c <DHT_Receive_data>
 4dc:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <CheckSum>
		
		//WRITE MEASUREMENTS TO STRUCTURE		//DATA STRUCTURE DEFINE IN EEPROM.h
		Data_Measurements.D_Temperature = D_Temp;
 4e0:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <D_Temp>
 4e4:	8b 83       	std	Y+3, r24	; 0x03
		Data_Measurements.I_Temperature = I_Temp;
 4e6:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <I_Temp>
 4ea:	8a 83       	std	Y+2, r24	; 0x02
		Data_Measurements.I_Humidity = I_HUM;
 4ec:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <I_HUM>
 4f0:	88 83       	st	Y, r24
		Data_Measurements.D_Humidity = D_HUM;
 4f2:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <D_HUM>
 4f6:	89 83       	std	Y+1, r24	; 0x01
		
		
		/************************************************		EEPROM READ AND WRITE			*************************************************************/
		//write_all_to_EEPROM(EEPROM_ADDRESS,&Data_Measurements);
		read_all_from_EEPROM(EEPROM_ADDRESS);
 4f8:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
 4fc:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <__data_end+0x1>
 500:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <read_all_from_EEPROM>
		
		
		/************************************************				DISPLAYS					*************************************************************/
		// ADC1 RAINDROPS DISPLAY
		tr_locate(1,1);
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
		tr_attr(1,YELLOW,BLACK);
 50c:	40 e0       	ldi	r20, 0x00	; 0
 50e:	63 e0       	ldi	r22, 0x03	; 3
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	0e 94 73 03 	call	0x6e6	; 0x6e6 <tr_attr>
		USART_PutS("RAIN_DROPS_ADC1 = ");
 516:	8b e4       	ldi	r24, 0x4B	; 75
 518:	92 e0       	ldi	r25, 0x02	; 2
 51a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
		USART_PutInt(meas1,10);
 51e:	c7 01       	movw	r24, r14
 520:	b6 01       	movw	r22, r12
 522:	0e 94 22 04 	call	0x844	; 0x844 <__fixunssfsi>
 526:	dc 01       	movw	r26, r24
 528:	cb 01       	movw	r24, r22
 52a:	6a e0       	ldi	r22, 0x0A	; 10
 52c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
		USART_PutS("         \n");
 530:	8e e5       	ldi	r24, 0x5E	; 94
 532:	92 e0       	ldi	r25, 0x02	; 2
 534:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
			//VOLTAGE DISPLAY
		tr_locate(2,1);
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
		tr_pen_color(MAGENTA);
 540:	85 e0       	ldi	r24, 0x05	; 5
 542:	0e 94 9e 03 	call	0x73c	; 0x73c <tr_pen_color>
		USART_PutS("RAIN_DROPS_VOLTAGE = ");
 546:	89 e6       	ldi	r24, 0x69	; 105
 548:	92 e0       	ldi	r25, 0x02	; 2
 54a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
		USART_PutInt(divmod1.quot,10);
 54e:	6a e0       	ldi	r22, 0x0A	; 10
 550:	80 2f       	mov	r24, r16
 552:	9a 2d       	mov	r25, r10
 554:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
		USART_PutS(".");
 558:	8e ef       	ldi	r24, 0xFE	; 254
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
		USART_PutInt(divmod1.rem,10);
 560:	6a e0       	ldi	r22, 0x0A	; 10
 562:	81 2f       	mov	r24, r17
 564:	9b 2d       	mov	r25, r11
 566:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
		tr_locate(2,27);
 56a:	6b e1       	ldi	r22, 0x1B	; 27
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
		USART_PutS("V\n");
 572:	8f e7       	ldi	r24, 0x7F	; 127
 574:	92 e0       	ldi	r25, 0x02	; 2
 576:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
		
		// ADC2 LIGHT INTENSITY DISPLAY
		tr_locate(3,1);
 57a:	61 e0       	ldi	r22, 0x01	; 1
 57c:	83 e0       	ldi	r24, 0x03	; 3
 57e:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
		tr_attr(1,CYAN,BLACK);
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	66 e0       	ldi	r22, 0x06	; 6
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0e 94 73 03 	call	0x6e6	; 0x6e6 <tr_attr>
		USART_PutS("LIGHT_INTENSITY_ADC2 = ");
 58c:	82 e8       	ldi	r24, 0x82	; 130
 58e:	92 e0       	ldi	r25, 0x02	; 2
 590:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
		USART_PutInt(meas2,10);
 594:	c3 01       	movw	r24, r6
 596:	b2 01       	movw	r22, r4
 598:	0e 94 22 04 	call	0x844	; 0x844 <__fixunssfsi>
 59c:	dc 01       	movw	r26, r24
 59e:	cb 01       	movw	r24, r22
 5a0:	6a e0       	ldi	r22, 0x0A	; 10
 5a2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
		USART_PutS("         \n");
 5a6:	8e e5       	ldi	r24, 0x5E	; 94
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
			//VOLTAGE DISPLAY
		tr_locate(4,1);
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	84 e0       	ldi	r24, 0x04	; 4
 5b2:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
		tr_pen_color(GREEN);
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	0e 94 9e 03 	call	0x73c	; 0x73c <tr_pen_color>
		USART_PutS("LIGHT_INTENSITY_VOLTAGE = ");
 5bc:	8a e9       	ldi	r24, 0x9A	; 154
 5be:	92 e0       	ldi	r25, 0x02	; 2
 5c0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
		USART_PutInt(divmod2.quot,10);
 5c4:	6a e0       	ldi	r22, 0x0A	; 10
 5c6:	88 2d       	mov	r24, r8
 5c8:	92 2d       	mov	r25, r2
 5ca:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
		USART_PutS(".");
 5ce:	8e ef       	ldi	r24, 0xFE	; 254
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
		USART_PutInt(divmod2.rem,10);
 5d6:	6a e0       	ldi	r22, 0x0A	; 10
 5d8:	89 2d       	mov	r24, r9
 5da:	93 2d       	mov	r25, r3
 5dc:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
		tr_locate(4,32);
 5e0:	60 e2       	ldi	r22, 0x20	; 32
 5e2:	84 e0       	ldi	r24, 0x04	; 4
 5e4:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
		USART_PutS("V\n");
 5e8:	8f e7       	ldi	r24, 0x7F	; 127
 5ea:	92 e0       	ldi	r25, 0x02	; 2
 5ec:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
		
		//DHT11 DISPLAY
		if ((I_HUM + D_HUM + I_Temp + D_Temp) != CheckSum) 
 5f0:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <I_HUM>
 5f4:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <D_HUM>
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	82 0f       	add	r24, r18
 5fc:	91 1d       	adc	r25, r1
 5fe:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <I_Temp>
 602:	82 0f       	add	r24, r18
 604:	91 1d       	adc	r25, r1
 606:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <D_Temp>
 60a:	82 0f       	add	r24, r18
 60c:	91 1d       	adc	r25, r1
 60e:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <CheckSum>
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	82 17       	cp	r24, r18
 616:	93 07       	cpc	r25, r19
 618:	29 f0       	breq	.+10     	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
			USART_PutS("Error");
 61a:	85 eb       	ldi	r24, 0xB5	; 181
 61c:	92 e0       	ldi	r25, 0x02	; 2
 61e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
 622:	de ce       	rjmp	.-580    	; 0x3e0 <main+0x4a>
		else
		{	
			tr_locate(5,1);
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	85 e0       	ldi	r24, 0x05	; 5
 628:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
			tr_pen_color(BLUE);
 62c:	84 e0       	ldi	r24, 0x04	; 4
 62e:	0e 94 9e 03 	call	0x73c	; 0x73c <tr_pen_color>
			USART_PutS("Humidity = ");
 632:	8b eb       	ldi	r24, 0xBB	; 187
 634:	92 e0       	ldi	r25, 0x02	; 2
 636:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
			USART_PutInt(I_HUM,10);
 63a:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <I_HUM>
 63e:	6a e0       	ldi	r22, 0x0A	; 10
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
			USART_PutS(".");
 646:	8e ef       	ldi	r24, 0xFE	; 254
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
			USART_PutInt(D_HUM,10);
 64e:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <D_HUM>
 652:	6a e0       	ldi	r22, 0x0A	; 10
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
			USART_PutS("%\n");
 65a:	87 ec       	ldi	r24, 0xC7	; 199
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>

			tr_locate(6,1);
 662:	61 e0       	ldi	r22, 0x01	; 1
 664:	86 e0       	ldi	r24, 0x06	; 6
 666:	0e 94 b2 03 	call	0x764	; 0x764 <tr_locate>
			tr_pen_color(RED);
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	0e 94 9e 03 	call	0x73c	; 0x73c <tr_pen_color>
			USART_PutS("Temperature = ");
 670:	8a ec       	ldi	r24, 0xCA	; 202
 672:	92 e0       	ldi	r25, 0x02	; 2
 674:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
			USART_PutInt(I_Temp,10);
 678:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <I_Temp>
 67c:	6a e0       	ldi	r22, 0x0A	; 10
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
			USART_PutS(".");
 684:	8e ef       	ldi	r24, 0xFE	; 254
 686:	91 e0       	ldi	r25, 0x01	; 1
 688:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
			USART_PutInt(D_Temp,10);
 68c:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <D_Temp>
 690:	6a e0       	ldi	r22, 0x0A	; 10
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
			USART_PutC(176);
 698:	80 eb       	ldi	r24, 0xB0	; 176
 69a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
			USART_PutS("C\n");
 69e:	89 ed       	ldi	r24, 0xD9	; 217
 6a0:	92 e0       	ldi	r25, 0x02	; 2
 6a2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
		}	
	}
 6a6:	9c ce       	rjmp	.-712    	; 0x3e0 <main+0x4a>

000006a8 <tr_cursor_hide>:
	USART_PutC( 0x1b );		// <ESC>[44m
	USART_PutC( '[' );
	USART_PutC( '4' );
	USART_PutC( cl+'0' );
	USART_PutC( 'm' );
}
 6a8:	88 23       	and	r24, r24
 6aa:	29 f0       	breq	.+10     	; 0x6b6 <tr_cursor_hide+0xe>
 6ac:	8f eb       	ldi	r24, 0xBF	; 191
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 0c 04 	call	0x818	; 0x818 <USART_PutS_P>
 6b4:	08 95       	ret
 6b6:	88 eb       	ldi	r24, 0xB8	; 184
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	0e 94 0c 04 	call	0x818	; 0x818 <USART_PutS_P>
 6be:	08 95       	ret

000006c0 <tr_cls>:
 6c0:	cf 93       	push	r28
 6c2:	c8 2f       	mov	r28, r24
 6c4:	84 eb       	ldi	r24, 0xB4	; 180
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e 94 0c 04 	call	0x818	; 0x818 <USART_PutS_P>
 6cc:	8c 2f       	mov	r24, r28
 6ce:	0e 94 54 03 	call	0x6a8	; 0x6a8 <tr_cursor_hide>
 6d2:	8b ec       	ldi	r24, 0xCB	; 203
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 0c 04 	call	0x818	; 0x818 <USART_PutS_P>
 6da:	86 ec       	ldi	r24, 0xC6	; 198
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 94 0c 04 	call	0x818	; 0x818 <USART_PutS_P>
 6e2:	cf 91       	pop	r28
 6e4:	08 95       	ret

000006e6 <tr_attr>:
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	18 2f       	mov	r17, r24
 6ee:	d6 2f       	mov	r29, r22
 6f0:	c4 2f       	mov	r28, r20
 6f2:	8b e1       	ldi	r24, 0x1B	; 27
 6f4:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 6f8:	8b e5       	ldi	r24, 0x5B	; 91
 6fa:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 6fe:	80 e3       	ldi	r24, 0x30	; 48
 700:	81 0f       	add	r24, r17
 702:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 706:	8b e3       	ldi	r24, 0x3B	; 59
 708:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 70c:	83 e3       	ldi	r24, 0x33	; 51
 70e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 712:	80 e3       	ldi	r24, 0x30	; 48
 714:	8d 0f       	add	r24, r29
 716:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 71a:	8b e3       	ldi	r24, 0x3B	; 59
 71c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 720:	84 e3       	ldi	r24, 0x34	; 52
 722:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 726:	80 e3       	ldi	r24, 0x30	; 48
 728:	8c 0f       	add	r24, r28
 72a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 72e:	8d e6       	ldi	r24, 0x6D	; 109
 730:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	1f 91       	pop	r17
 73a:	08 95       	ret

0000073c <tr_pen_color>:
 73c:	cf 93       	push	r28
 73e:	c8 2f       	mov	r28, r24
 740:	8b e1       	ldi	r24, 0x1B	; 27
 742:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 746:	8b e5       	ldi	r24, 0x5B	; 91
 748:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 74c:	83 e3       	ldi	r24, 0x33	; 51
 74e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 752:	80 e3       	ldi	r24, 0x30	; 48
 754:	8c 0f       	add	r24, r28
 756:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 75a:	8d e6       	ldi	r24, 0x6D	; 109
 75c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 760:	cf 91       	pop	r28
 762:	08 95       	ret

00000764 <tr_locate>:


void tr_locate( uint8_t y, uint8_t x ) {
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	d8 2f       	mov	r29, r24
 76a:	c6 2f       	mov	r28, r22

	USART_PutC( 0x1b );	// <ESC>[y;xH
 76c:	8b e1       	ldi	r24, 0x1B	; 27
 76e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
	USART_PutC( '[' );
 772:	8b e5       	ldi	r24, 0x5B	; 91
 774:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
	USART_PutInt( y, 10 );
 778:	6a e0       	ldi	r22, 0x0A	; 10
 77a:	8d 2f       	mov	r24, r29
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
	USART_PutC( ';' );
 782:	8b e3       	ldi	r24, 0x3B	; 59
 784:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
	USART_PutInt( x, 10 );
 788:	6a e0       	ldi	r22, 0x0A	; 10
 78a:	8c 2f       	mov	r24, r28
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_PutInt>
	USART_PutC( 'H' );
 792:	88 e4       	ldi	r24, 0x48	; 72
 794:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
}
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	08 95       	ret

0000079e <USART_Init>:
#include "usart.h"

void USART_Init( unsigned int ubrr) // Inicjalizacja UART
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 79e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 7a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 7a6:	88 e1       	ldi	r24, 0x18	; 24
 7a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (3<<UCSZ00);
 7ac:	86 e0       	ldi	r24, 0x06	; 6
 7ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 7b2:	08 95       	ret

000007b4 <USART_PutC>:
}

void USART_PutC( char data ) // Wysylamy pojedynczy znak
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 7b4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 7b8:	95 ff       	sbrs	r25, 5
 7ba:	fc cf       	rjmp	.-8      	; 0x7b4 <USART_PutC>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 7bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 7c0:	08 95       	ret

000007c2 <USART_PutS>:
}

void USART_PutS( char * s) // Wysylamy string, ciag znakow
{
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	ec 01       	movw	r28, r24
	while( *s ) USART_PutC( *s++ );
 7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <USART_PutS+0xe>
 7ca:	21 96       	adiw	r28, 0x01	; 1
 7cc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 7d0:	88 81       	ld	r24, Y
 7d2:	81 11       	cpse	r24, r1
 7d4:	fa cf       	rjmp	.-12     	; 0x7ca <USART_PutS+0x8>
}
 7d6:	df 91       	pop	r29
 7d8:	cf 91       	pop	r28
 7da:	08 95       	ret

000007dc <USART_PutInt>:

void USART_PutInt(uint16_t number, uint8_t radix) // Wysylamy liczbe int, radix to w jakim formacie wyswietlamy liczbe 2-dwojkowy 10-dziesiatkowy 16-szesntastkowy
{
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
 7e4:	61 97       	sbiw	r28, 0x11	; 17
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	f8 94       	cli
 7ea:	de bf       	out	0x3e, r29	; 62
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	cd bf       	out	0x3d, r28	; 61
	char buf[17];
	itoa(number,buf,radix); //funkcja integer to ascii, jak za male wartosci to zmienic int na log i funkcja ltoa
 7f0:	46 2f       	mov	r20, r22
 7f2:	50 e0       	ldi	r21, 0x00	; 0
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
 7f4:	be 01       	movw	r22, r28
 7f6:	6f 5f       	subi	r22, 0xFF	; 255
 7f8:	7f 4f       	sbci	r23, 0xFF	; 255
 7fa:	0e 94 74 05 	call	0xae8	; 0xae8 <itoa>
	USART_PutS(buf);
 7fe:	ce 01       	movw	r24, r28
 800:	01 96       	adiw	r24, 0x01	; 1
 802:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <USART_PutS>
}
 806:	61 96       	adiw	r28, 0x11	; 17
 808:	0f b6       	in	r0, 0x3f	; 63
 80a:	f8 94       	cli
 80c:	de bf       	out	0x3e, r29	; 62
 80e:	0f be       	out	0x3f, r0	; 63
 810:	cd bf       	out	0x3d, r28	; 61
 812:	df 91       	pop	r29
 814:	cf 91       	pop	r28
 816:	08 95       	ret

00000818 <USART_PutS_P>:

void USART_PutS_P(const char *s)	// wysy³a ³añcuch z pamiêci RAM na UART
{
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	fc 01       	movw	r30, r24
	register char c;
	while((c = pgm_read_byte(s++) )) USART_PutC(c);
 81e:	03 c0       	rjmp	.+6      	; 0x826 <USART_PutS_P+0xe>
 820:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART_PutC>
 824:	fe 01       	movw	r30, r28
 826:	ef 01       	movw	r28, r30
 828:	21 96       	adiw	r28, 0x01	; 1
 82a:	84 91       	lpm	r24, Z
 82c:	81 11       	cpse	r24, r1
 82e:	f8 cf       	rjmp	.-16     	; 0x820 <USART_PutS_P+0x8>
}
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	08 95       	ret

00000836 <__fixsfsi>:
 836:	0e 94 22 04 	call	0x844	; 0x844 <__fixunssfsi>
 83a:	68 94       	set
 83c:	b1 11       	cpse	r27, r1
 83e:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_szero>
 842:	08 95       	ret

00000844 <__fixunssfsi>:
 844:	0e 94 96 04 	call	0x92c	; 0x92c <__fp_splitA>
 848:	88 f0       	brcs	.+34     	; 0x86c <__fixunssfsi+0x28>
 84a:	9f 57       	subi	r25, 0x7F	; 127
 84c:	98 f0       	brcs	.+38     	; 0x874 <__fixunssfsi+0x30>
 84e:	b9 2f       	mov	r27, r25
 850:	99 27       	eor	r25, r25
 852:	b7 51       	subi	r27, 0x17	; 23
 854:	b0 f0       	brcs	.+44     	; 0x882 <__fixunssfsi+0x3e>
 856:	e1 f0       	breq	.+56     	; 0x890 <__fixunssfsi+0x4c>
 858:	66 0f       	add	r22, r22
 85a:	77 1f       	adc	r23, r23
 85c:	88 1f       	adc	r24, r24
 85e:	99 1f       	adc	r25, r25
 860:	1a f0       	brmi	.+6      	; 0x868 <__fixunssfsi+0x24>
 862:	ba 95       	dec	r27
 864:	c9 f7       	brne	.-14     	; 0x858 <__fixunssfsi+0x14>
 866:	14 c0       	rjmp	.+40     	; 0x890 <__fixunssfsi+0x4c>
 868:	b1 30       	cpi	r27, 0x01	; 1
 86a:	91 f0       	breq	.+36     	; 0x890 <__fixunssfsi+0x4c>
 86c:	0e 94 b0 04 	call	0x960	; 0x960 <__fp_zero>
 870:	b1 e0       	ldi	r27, 0x01	; 1
 872:	08 95       	ret
 874:	0c 94 b0 04 	jmp	0x960	; 0x960 <__fp_zero>
 878:	67 2f       	mov	r22, r23
 87a:	78 2f       	mov	r23, r24
 87c:	88 27       	eor	r24, r24
 87e:	b8 5f       	subi	r27, 0xF8	; 248
 880:	39 f0       	breq	.+14     	; 0x890 <__fixunssfsi+0x4c>
 882:	b9 3f       	cpi	r27, 0xF9	; 249
 884:	cc f3       	brlt	.-14     	; 0x878 <__fixunssfsi+0x34>
 886:	86 95       	lsr	r24
 888:	77 95       	ror	r23
 88a:	67 95       	ror	r22
 88c:	b3 95       	inc	r27
 88e:	d9 f7       	brne	.-10     	; 0x886 <__fixunssfsi+0x42>
 890:	3e f4       	brtc	.+14     	; 0x8a0 <__fixunssfsi+0x5c>
 892:	90 95       	com	r25
 894:	80 95       	com	r24
 896:	70 95       	com	r23
 898:	61 95       	neg	r22
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	08 95       	ret

000008a2 <__floatunsisf>:
 8a2:	e8 94       	clt
 8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <__floatsisf+0x12>

000008a6 <__floatsisf>:
 8a6:	97 fb       	bst	r25, 7
 8a8:	3e f4       	brtc	.+14     	; 0x8b8 <__floatsisf+0x12>
 8aa:	90 95       	com	r25
 8ac:	80 95       	com	r24
 8ae:	70 95       	com	r23
 8b0:	61 95       	neg	r22
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	99 23       	and	r25, r25
 8ba:	a9 f0       	breq	.+42     	; 0x8e6 <__floatsisf+0x40>
 8bc:	f9 2f       	mov	r31, r25
 8be:	96 e9       	ldi	r25, 0x96	; 150
 8c0:	bb 27       	eor	r27, r27
 8c2:	93 95       	inc	r25
 8c4:	f6 95       	lsr	r31
 8c6:	87 95       	ror	r24
 8c8:	77 95       	ror	r23
 8ca:	67 95       	ror	r22
 8cc:	b7 95       	ror	r27
 8ce:	f1 11       	cpse	r31, r1
 8d0:	f8 cf       	rjmp	.-16     	; 0x8c2 <__floatsisf+0x1c>
 8d2:	fa f4       	brpl	.+62     	; 0x912 <__stack+0x13>
 8d4:	bb 0f       	add	r27, r27
 8d6:	11 f4       	brne	.+4      	; 0x8dc <__floatsisf+0x36>
 8d8:	60 ff       	sbrs	r22, 0
 8da:	1b c0       	rjmp	.+54     	; 0x912 <__stack+0x13>
 8dc:	6f 5f       	subi	r22, 0xFF	; 255
 8de:	7f 4f       	sbci	r23, 0xFF	; 255
 8e0:	8f 4f       	sbci	r24, 0xFF	; 255
 8e2:	9f 4f       	sbci	r25, 0xFF	; 255
 8e4:	16 c0       	rjmp	.+44     	; 0x912 <__stack+0x13>
 8e6:	88 23       	and	r24, r24
 8e8:	11 f0       	breq	.+4      	; 0x8ee <__floatsisf+0x48>
 8ea:	96 e9       	ldi	r25, 0x96	; 150
 8ec:	11 c0       	rjmp	.+34     	; 0x910 <__stack+0x11>
 8ee:	77 23       	and	r23, r23
 8f0:	21 f0       	breq	.+8      	; 0x8fa <__floatsisf+0x54>
 8f2:	9e e8       	ldi	r25, 0x8E	; 142
 8f4:	87 2f       	mov	r24, r23
 8f6:	76 2f       	mov	r23, r22
 8f8:	05 c0       	rjmp	.+10     	; 0x904 <__stack+0x5>
 8fa:	66 23       	and	r22, r22
 8fc:	71 f0       	breq	.+28     	; 0x91a <__stack+0x1b>
 8fe:	96 e8       	ldi	r25, 0x86	; 134
 900:	86 2f       	mov	r24, r22
 902:	70 e0       	ldi	r23, 0x00	; 0
 904:	60 e0       	ldi	r22, 0x00	; 0
 906:	2a f0       	brmi	.+10     	; 0x912 <__stack+0x13>
 908:	9a 95       	dec	r25
 90a:	66 0f       	add	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24
 910:	da f7       	brpl	.-10     	; 0x908 <__stack+0x9>
 912:	88 0f       	add	r24, r24
 914:	96 95       	lsr	r25
 916:	87 95       	ror	r24
 918:	97 f9       	bld	r25, 7
 91a:	08 95       	ret

0000091c <__fp_split3>:
 91c:	57 fd       	sbrc	r21, 7
 91e:	90 58       	subi	r25, 0x80	; 128
 920:	44 0f       	add	r20, r20
 922:	55 1f       	adc	r21, r21
 924:	59 f0       	breq	.+22     	; 0x93c <__fp_splitA+0x10>
 926:	5f 3f       	cpi	r21, 0xFF	; 255
 928:	71 f0       	breq	.+28     	; 0x946 <__fp_splitA+0x1a>
 92a:	47 95       	ror	r20

0000092c <__fp_splitA>:
 92c:	88 0f       	add	r24, r24
 92e:	97 fb       	bst	r25, 7
 930:	99 1f       	adc	r25, r25
 932:	61 f0       	breq	.+24     	; 0x94c <__fp_splitA+0x20>
 934:	9f 3f       	cpi	r25, 0xFF	; 255
 936:	79 f0       	breq	.+30     	; 0x956 <__fp_splitA+0x2a>
 938:	87 95       	ror	r24
 93a:	08 95       	ret
 93c:	12 16       	cp	r1, r18
 93e:	13 06       	cpc	r1, r19
 940:	14 06       	cpc	r1, r20
 942:	55 1f       	adc	r21, r21
 944:	f2 cf       	rjmp	.-28     	; 0x92a <__fp_split3+0xe>
 946:	46 95       	lsr	r20
 948:	f1 df       	rcall	.-30     	; 0x92c <__fp_splitA>
 94a:	08 c0       	rjmp	.+16     	; 0x95c <__fp_splitA+0x30>
 94c:	16 16       	cp	r1, r22
 94e:	17 06       	cpc	r1, r23
 950:	18 06       	cpc	r1, r24
 952:	99 1f       	adc	r25, r25
 954:	f1 cf       	rjmp	.-30     	; 0x938 <__fp_splitA+0xc>
 956:	86 95       	lsr	r24
 958:	71 05       	cpc	r23, r1
 95a:	61 05       	cpc	r22, r1
 95c:	08 94       	sec
 95e:	08 95       	ret

00000960 <__fp_zero>:
 960:	e8 94       	clt

00000962 <__fp_szero>:
 962:	bb 27       	eor	r27, r27
 964:	66 27       	eor	r22, r22
 966:	77 27       	eor	r23, r23
 968:	cb 01       	movw	r24, r22
 96a:	97 f9       	bld	r25, 7
 96c:	08 95       	ret

0000096e <__mulsf3>:
 96e:	0e 94 ca 04 	call	0x994	; 0x994 <__mulsf3x>
 972:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_round>
 976:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_pscA>
 97a:	38 f0       	brcs	.+14     	; 0x98a <__mulsf3+0x1c>
 97c:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_pscB>
 980:	20 f0       	brcs	.+8      	; 0x98a <__mulsf3+0x1c>
 982:	95 23       	and	r25, r21
 984:	11 f0       	breq	.+4      	; 0x98a <__mulsf3+0x1c>
 986:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_inf>
 98a:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_nan>
 98e:	11 24       	eor	r1, r1
 990:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_szero>

00000994 <__mulsf3x>:
 994:	0e 94 8e 04 	call	0x91c	; 0x91c <__fp_split3>
 998:	70 f3       	brcs	.-36     	; 0x976 <__mulsf3+0x8>

0000099a <__mulsf3_pse>:
 99a:	95 9f       	mul	r25, r21
 99c:	c1 f3       	breq	.-16     	; 0x98e <__mulsf3+0x20>
 99e:	95 0f       	add	r25, r21
 9a0:	50 e0       	ldi	r21, 0x00	; 0
 9a2:	55 1f       	adc	r21, r21
 9a4:	62 9f       	mul	r22, r18
 9a6:	f0 01       	movw	r30, r0
 9a8:	72 9f       	mul	r23, r18
 9aa:	bb 27       	eor	r27, r27
 9ac:	f0 0d       	add	r31, r0
 9ae:	b1 1d       	adc	r27, r1
 9b0:	63 9f       	mul	r22, r19
 9b2:	aa 27       	eor	r26, r26
 9b4:	f0 0d       	add	r31, r0
 9b6:	b1 1d       	adc	r27, r1
 9b8:	aa 1f       	adc	r26, r26
 9ba:	64 9f       	mul	r22, r20
 9bc:	66 27       	eor	r22, r22
 9be:	b0 0d       	add	r27, r0
 9c0:	a1 1d       	adc	r26, r1
 9c2:	66 1f       	adc	r22, r22
 9c4:	82 9f       	mul	r24, r18
 9c6:	22 27       	eor	r18, r18
 9c8:	b0 0d       	add	r27, r0
 9ca:	a1 1d       	adc	r26, r1
 9cc:	62 1f       	adc	r22, r18
 9ce:	73 9f       	mul	r23, r19
 9d0:	b0 0d       	add	r27, r0
 9d2:	a1 1d       	adc	r26, r1
 9d4:	62 1f       	adc	r22, r18
 9d6:	83 9f       	mul	r24, r19
 9d8:	a0 0d       	add	r26, r0
 9da:	61 1d       	adc	r22, r1
 9dc:	22 1f       	adc	r18, r18
 9de:	74 9f       	mul	r23, r20
 9e0:	33 27       	eor	r19, r19
 9e2:	a0 0d       	add	r26, r0
 9e4:	61 1d       	adc	r22, r1
 9e6:	23 1f       	adc	r18, r19
 9e8:	84 9f       	mul	r24, r20
 9ea:	60 0d       	add	r22, r0
 9ec:	21 1d       	adc	r18, r1
 9ee:	82 2f       	mov	r24, r18
 9f0:	76 2f       	mov	r23, r22
 9f2:	6a 2f       	mov	r22, r26
 9f4:	11 24       	eor	r1, r1
 9f6:	9f 57       	subi	r25, 0x7F	; 127
 9f8:	50 40       	sbci	r21, 0x00	; 0
 9fa:	9a f0       	brmi	.+38     	; 0xa22 <__mulsf3_pse+0x88>
 9fc:	f1 f0       	breq	.+60     	; 0xa3a <__mulsf3_pse+0xa0>
 9fe:	88 23       	and	r24, r24
 a00:	4a f0       	brmi	.+18     	; 0xa14 <__mulsf3_pse+0x7a>
 a02:	ee 0f       	add	r30, r30
 a04:	ff 1f       	adc	r31, r31
 a06:	bb 1f       	adc	r27, r27
 a08:	66 1f       	adc	r22, r22
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 1f       	adc	r24, r24
 a0e:	91 50       	subi	r25, 0x01	; 1
 a10:	50 40       	sbci	r21, 0x00	; 0
 a12:	a9 f7       	brne	.-22     	; 0x9fe <__mulsf3_pse+0x64>
 a14:	9e 3f       	cpi	r25, 0xFE	; 254
 a16:	51 05       	cpc	r21, r1
 a18:	80 f0       	brcs	.+32     	; 0xa3a <__mulsf3_pse+0xa0>
 a1a:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_inf>
 a1e:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_szero>
 a22:	5f 3f       	cpi	r21, 0xFF	; 255
 a24:	e4 f3       	brlt	.-8      	; 0xa1e <__mulsf3_pse+0x84>
 a26:	98 3e       	cpi	r25, 0xE8	; 232
 a28:	d4 f3       	brlt	.-12     	; 0xa1e <__mulsf3_pse+0x84>
 a2a:	86 95       	lsr	r24
 a2c:	77 95       	ror	r23
 a2e:	67 95       	ror	r22
 a30:	b7 95       	ror	r27
 a32:	f7 95       	ror	r31
 a34:	e7 95       	ror	r30
 a36:	9f 5f       	subi	r25, 0xFF	; 255
 a38:	c1 f7       	brne	.-16     	; 0xa2a <__mulsf3_pse+0x90>
 a3a:	fe 2b       	or	r31, r30
 a3c:	88 0f       	add	r24, r24
 a3e:	91 1d       	adc	r25, r1
 a40:	96 95       	lsr	r25
 a42:	87 95       	ror	r24
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <__fp_inf>:
 a48:	97 f9       	bld	r25, 7
 a4a:	9f 67       	ori	r25, 0x7F	; 127
 a4c:	80 e8       	ldi	r24, 0x80	; 128
 a4e:	70 e0       	ldi	r23, 0x00	; 0
 a50:	60 e0       	ldi	r22, 0x00	; 0
 a52:	08 95       	ret

00000a54 <__fp_nan>:
 a54:	9f ef       	ldi	r25, 0xFF	; 255
 a56:	80 ec       	ldi	r24, 0xC0	; 192
 a58:	08 95       	ret

00000a5a <__fp_pscA>:
 a5a:	00 24       	eor	r0, r0
 a5c:	0a 94       	dec	r0
 a5e:	16 16       	cp	r1, r22
 a60:	17 06       	cpc	r1, r23
 a62:	18 06       	cpc	r1, r24
 a64:	09 06       	cpc	r0, r25
 a66:	08 95       	ret

00000a68 <__fp_pscB>:
 a68:	00 24       	eor	r0, r0
 a6a:	0a 94       	dec	r0
 a6c:	12 16       	cp	r1, r18
 a6e:	13 06       	cpc	r1, r19
 a70:	14 06       	cpc	r1, r20
 a72:	05 06       	cpc	r0, r21
 a74:	08 95       	ret

00000a76 <__fp_round>:
 a76:	09 2e       	mov	r0, r25
 a78:	03 94       	inc	r0
 a7a:	00 0c       	add	r0, r0
 a7c:	11 f4       	brne	.+4      	; 0xa82 <__fp_round+0xc>
 a7e:	88 23       	and	r24, r24
 a80:	52 f0       	brmi	.+20     	; 0xa96 <__fp_round+0x20>
 a82:	bb 0f       	add	r27, r27
 a84:	40 f4       	brcc	.+16     	; 0xa96 <__fp_round+0x20>
 a86:	bf 2b       	or	r27, r31
 a88:	11 f4       	brne	.+4      	; 0xa8e <__fp_round+0x18>
 a8a:	60 ff       	sbrs	r22, 0
 a8c:	04 c0       	rjmp	.+8      	; 0xa96 <__fp_round+0x20>
 a8e:	6f 5f       	subi	r22, 0xFF	; 255
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	8f 4f       	sbci	r24, 0xFF	; 255
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	08 95       	ret

00000a98 <__divmodhi4>:
 a98:	97 fb       	bst	r25, 7
 a9a:	07 2e       	mov	r0, r23
 a9c:	16 f4       	brtc	.+4      	; 0xaa2 <__divmodhi4+0xa>
 a9e:	00 94       	com	r0
 aa0:	07 d0       	rcall	.+14     	; 0xab0 <__divmodhi4_neg1>
 aa2:	77 fd       	sbrc	r23, 7
 aa4:	09 d0       	rcall	.+18     	; 0xab8 <__divmodhi4_neg2>
 aa6:	0e 94 60 05 	call	0xac0	; 0xac0 <__udivmodhi4>
 aaa:	07 fc       	sbrc	r0, 7
 aac:	05 d0       	rcall	.+10     	; 0xab8 <__divmodhi4_neg2>
 aae:	3e f4       	brtc	.+14     	; 0xabe <__divmodhi4_exit>

00000ab0 <__divmodhi4_neg1>:
 ab0:	90 95       	com	r25
 ab2:	81 95       	neg	r24
 ab4:	9f 4f       	sbci	r25, 0xFF	; 255
 ab6:	08 95       	ret

00000ab8 <__divmodhi4_neg2>:
 ab8:	70 95       	com	r23
 aba:	61 95       	neg	r22
 abc:	7f 4f       	sbci	r23, 0xFF	; 255

00000abe <__divmodhi4_exit>:
 abe:	08 95       	ret

00000ac0 <__udivmodhi4>:
 ac0:	aa 1b       	sub	r26, r26
 ac2:	bb 1b       	sub	r27, r27
 ac4:	51 e1       	ldi	r21, 0x11	; 17
 ac6:	07 c0       	rjmp	.+14     	; 0xad6 <__udivmodhi4_ep>

00000ac8 <__udivmodhi4_loop>:
 ac8:	aa 1f       	adc	r26, r26
 aca:	bb 1f       	adc	r27, r27
 acc:	a6 17       	cp	r26, r22
 ace:	b7 07       	cpc	r27, r23
 ad0:	10 f0       	brcs	.+4      	; 0xad6 <__udivmodhi4_ep>
 ad2:	a6 1b       	sub	r26, r22
 ad4:	b7 0b       	sbc	r27, r23

00000ad6 <__udivmodhi4_ep>:
 ad6:	88 1f       	adc	r24, r24
 ad8:	99 1f       	adc	r25, r25
 ada:	5a 95       	dec	r21
 adc:	a9 f7       	brne	.-22     	; 0xac8 <__udivmodhi4_loop>
 ade:	80 95       	com	r24
 ae0:	90 95       	com	r25
 ae2:	bc 01       	movw	r22, r24
 ae4:	cd 01       	movw	r24, r26
 ae6:	08 95       	ret

00000ae8 <itoa>:
 ae8:	45 32       	cpi	r20, 0x25	; 37
 aea:	51 05       	cpc	r21, r1
 aec:	20 f4       	brcc	.+8      	; 0xaf6 <itoa+0xe>
 aee:	42 30       	cpi	r20, 0x02	; 2
 af0:	10 f0       	brcs	.+4      	; 0xaf6 <itoa+0xe>
 af2:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__itoa_ncheck>
 af6:	fb 01       	movw	r30, r22
 af8:	10 82       	st	Z, r1
 afa:	cb 01       	movw	r24, r22
 afc:	08 95       	ret

00000afe <__itoa_ncheck>:
 afe:	bb 27       	eor	r27, r27
 b00:	4a 30       	cpi	r20, 0x0A	; 10
 b02:	31 f4       	brne	.+12     	; 0xb10 <__itoa_ncheck+0x12>
 b04:	99 23       	and	r25, r25
 b06:	22 f4       	brpl	.+8      	; 0xb10 <__itoa_ncheck+0x12>
 b08:	bd e2       	ldi	r27, 0x2D	; 45
 b0a:	90 95       	com	r25
 b0c:	81 95       	neg	r24
 b0e:	9f 4f       	sbci	r25, 0xFF	; 255
 b10:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__utoa_common>

00000b14 <__utoa_ncheck>:
 b14:	bb 27       	eor	r27, r27

00000b16 <__utoa_common>:
 b16:	fb 01       	movw	r30, r22
 b18:	55 27       	eor	r21, r21
 b1a:	aa 27       	eor	r26, r26
 b1c:	88 0f       	add	r24, r24
 b1e:	99 1f       	adc	r25, r25
 b20:	aa 1f       	adc	r26, r26
 b22:	a4 17       	cp	r26, r20
 b24:	10 f0       	brcs	.+4      	; 0xb2a <__utoa_common+0x14>
 b26:	a4 1b       	sub	r26, r20
 b28:	83 95       	inc	r24
 b2a:	50 51       	subi	r21, 0x10	; 16
 b2c:	b9 f7       	brne	.-18     	; 0xb1c <__utoa_common+0x6>
 b2e:	a0 5d       	subi	r26, 0xD0	; 208
 b30:	aa 33       	cpi	r26, 0x3A	; 58
 b32:	08 f0       	brcs	.+2      	; 0xb36 <__utoa_common+0x20>
 b34:	a9 5d       	subi	r26, 0xD9	; 217
 b36:	a1 93       	st	Z+, r26
 b38:	00 97       	sbiw	r24, 0x00	; 0
 b3a:	79 f7       	brne	.-34     	; 0xb1a <__utoa_common+0x4>
 b3c:	b1 11       	cpse	r27, r1
 b3e:	b1 93       	st	Z+, r27
 b40:	11 92       	st	Z+, r1
 b42:	cb 01       	movw	r24, r22
 b44:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <strrev>

00000b48 <strrev>:
 b48:	dc 01       	movw	r26, r24
 b4a:	fc 01       	movw	r30, r24
 b4c:	67 2f       	mov	r22, r23
 b4e:	71 91       	ld	r23, Z+
 b50:	77 23       	and	r23, r23
 b52:	e1 f7       	brne	.-8      	; 0xb4c <strrev+0x4>
 b54:	32 97       	sbiw	r30, 0x02	; 2
 b56:	04 c0       	rjmp	.+8      	; 0xb60 <strrev+0x18>
 b58:	7c 91       	ld	r23, X
 b5a:	6d 93       	st	X+, r22
 b5c:	70 83       	st	Z, r23
 b5e:	62 91       	ld	r22, -Z
 b60:	ae 17       	cp	r26, r30
 b62:	bf 07       	cpc	r27, r31
 b64:	c8 f3       	brcs	.-14     	; 0xb58 <strrev+0x10>
 b66:	08 95       	ret

00000b68 <_exit>:
 b68:	f8 94       	cli

00000b6a <__stop_program>:
 b6a:	ff cf       	rjmp	.-2      	; 0xb6a <__stop_program>
